const router = require("express").Router();
const asyncHandler = require("express-async-handler");
const { MySong, Song } = require("../../db/models");
router.get(
    "/:userId",
    asyncHandler(async (req, res) => {
      const { userId } = req.params;
      console.log("üîπ ƒêang truy v·∫•n MySong v·ªõi userId:", userId);
  
      // L·∫•y danh s√°ch songId t·ª´ MySong
      const mySongs = await MySong.findAll({
        where: { userid: userId },
        attributes: ["songid"], // ‚úÖ ƒê·∫£m b·∫£o l·∫•y ƒë√∫ng c·ªôt "songid"
      });
  
      console.log("üîπ K·∫øt qu·∫£ MySong:", mySongs); // üöÄ Debug xem d·ªØ li·ªáu c√≥ ƒë√∫ng kh√¥ng
  
      if (!mySongs.length) {
        return res.status(404).json({ error: "Danh s√°ch b√†i h√°t c·ªßa b·∫°n tr·ªëng." });
      }
  
      const songIds = mySongs.map((entry) => entry.dataValues.songid); // ‚úÖ L·∫•y ƒë√∫ng key songid

      console.log("üîπ ƒêang truy v·∫•n Songs v·ªõi songIds:", songIds);
  
      // L·∫•y danh s√°ch b√†i h√°t d·ª±a tr√™n songIds
      const songs = await Song.findAll({
        where: { id: songIds },
        attributes: ["id", "title", "artist", "genre", "audioFile", "imgUrl", "album"],
      });
  
      return res.json({ userId, songs });
    })
  );
  router.get(
    "/count/:userId",
    asyncHandler(async (req, res) => {
      const { userId } = req.params;
  
      const songCount = await MySong.count({ where: { userid: userId } });
  
      return res.json({ userId, songCount });
    })
  );
  
// üìå Th√™m b√†i h√°t v√†o "My Songs"
router.post(
  "/",
  asyncHandler(async (req, res) => {
    const { userId, songId } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if (!userId || !songId) {
      return res.status(400).json({ error: "userId v√† songId l√† b·∫Øt bu·ªôc." });
    }

    // Ki·ªÉm tra xem b√†i h√°t c√≥ t·ªìn t·∫°i kh√¥ng
    const song = await Song.findByPk(songId);
    if (!song) {
      return res.status(404).json({ error: "B√†i h√°t kh√¥ng t·ªìn t·∫°i." });
    }

    // Ki·ªÉm tra xem b√†i h√°t ƒë√£ c√≥ trong danh s√°ch ch∆∞a
    const existingEntry = await MySong.findOne({ where: { userId, songId } });

    if (existingEntry) {
      return res.status(409).json({ error: "B√†i h√°t ƒë√£ c√≥ trong danh s√°ch c·ªßa b·∫°n." });
    }

    // Th√™m b√†i h√°t v√†o danh s√°ch
    const newEntry = await MySong.create({ userId, songId });
    return res.status(201).json({ message: "ƒê√£ th√™m b√†i h√°t v√†o danh s√°ch c·ªßa b·∫°n.", newEntry });
  })
);

// üìå X√≥a b√†i h√°t kh·ªèi "My Songs"
router.delete(
  "/",
  asyncHandler(async (req, res) => {
    const { userId, songId } = req.body;

    // Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
    if (!userId || !songId) {
      return res.status(400).json({ error: "userId v√† songId l√† b·∫Øt bu·ªôc." });
    }

    // Ki·ªÉm tra xem b√†i h√°t c√≥ trong danh s√°ch kh√¥ng
    const mySongEntry = await MySong.findOne({ where: { userId, songId } });

    if (!mySongEntry) {
      return res.status(404).json({ error: "B√†i h√°t kh√¥ng t·ªìn t·∫°i trong danh s√°ch c·ªßa b·∫°n." });
    }

    // X√≥a b√†i h√°t kh·ªèi danh s√°ch
    await mySongEntry.destroy();
    return res.json({ message: "ƒê√£ x√≥a b√†i h√°t kh·ªèi danh s√°ch c·ªßa b·∫°n." });
  })
);

module.exports = router;
