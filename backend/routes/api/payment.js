const cors = require('cors');
let express = require('express');
let router = express.Router();
let $ = require('jquery');
const request = require('request');
const moment = require('moment');
const { Payment } = require("../../db/models");
const querystring = require("querystring");
const config = require("config");
const crypto = require("crypto");
const { requireAuth } = require("../../utils/auth"); // Import middleware x√°c th·ª±c


router.get("/check-premium/:userId", async (req, res) => {
    try {
      const { userId } = req.params;
      const isPremium = await Payment.isUserPremium(userId);
  
      res.json({
        userId,
        isPremium,
        message: isPremium ? "User is premium" : "User is not premium",
      });
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
  

router.post('/create_payment_url', function (req, res, next) {
    
    process.env.TZ = 'Asia/Ho_Chi_Minh';
    
    let date = new Date();
    let createDate = moment(date).format('YYYYMMDDHHmmss');
    
    let ipAddr = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;

    let config = require('config');
    
    let tmnCode = config.get('vnp_TmnCode');
    let secretKey = config.get('vnp_HashSecret');
    let vnpUrl = config.get('vnp_Url');
    let returnUrl = config.get('vnp_ReturnUrl');
    let orderId = moment(date).format('DDHHmmss');
    let amount = req.body.amount;
    let bankCode = req.body.bankCode;
    
    let locale = req.body.language;
    if(locale === null || locale === ''){
        locale = 'vn';
    }
    let currCode = 'VND';
    let vnp_Params = {};
    vnp_Params['vnp_Version'] = '2.1.0';
    vnp_Params['vnp_Command'] = 'pay';
    vnp_Params['vnp_TmnCode'] = tmnCode;
    vnp_Params['vnp_Locale'] = locale;
    vnp_Params['vnp_CurrCode'] = currCode;
    vnp_Params['vnp_TxnRef'] = orderId;
    vnp_Params['vnp_OrderInfo'] = 'Thanh toan cho ma GD:' + orderId;
    vnp_Params['vnp_OrderType'] = 'other';
    vnp_Params['vnp_Amount'] = amount * 100;
    vnp_Params['vnp_ReturnUrl'] = returnUrl;
    vnp_Params['vnp_IpAddr'] = ipAddr;
    vnp_Params['vnp_CreateDate'] = createDate;
    if(bankCode !== null && bankCode !== ''){
        vnp_Params['vnp_BankCode'] = bankCode;
    }

    vnp_Params = sortObject(vnp_Params);

    let querystring = require('qs');
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");     
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(new Buffer(signData, 'utf-8')).digest("hex"); 
    vnp_Params['vnp_SecureHash'] = signed;
    vnpUrl += '?' + querystring.stringify(vnp_Params, { encode: false });

    //res.redirect(vnpUrl)

    res.json({ paymentUrl: vnpUrl });

});

router.get("/vnpay_return", requireAuth, async function (req, res) { 
    if (!req.user) {
        console.error("‚ùå User not authenticated");
        return res.redirect(`http://localhost:3000/payment-failed?code=401`);
    }

    let vnp_Params = req.query;
    let secureHash = vnp_Params["vnp_SecureHash"];

    delete vnp_Params["vnp_SecureHash"];
    delete vnp_Params["vnp_SecureHashType"];

    vnp_Params = sortObject(vnp_Params);

    let config = require("config");
    let secretKey = config.get("vnp_HashSecret");

    let querystring = require("qs");
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(Buffer.from(signData, "utf-8")).digest("hex");

    console.log("üîí Secure Hash (from VNPAY):", secureHash);
    console.log("üîë Calculated Hash:", signed);

    if (secureHash === signed) {
        const { vnp_TxnRef, vnp_Amount, vnp_CurrCode, vnp_ResponseCode, vnp_TransactionStatus } = vnp_Params;
        const status = vnp_ResponseCode === "00" && vnp_TransactionStatus === "00" ? "completed" : "failed";
        let userId = req.user.id; // üõë L·∫•y userId t·ª´ req.user
            console.log("User ID1:", userId);
        try {
            let userId = req.user.id; // üõë L·∫•y userId t·ª´ req.user
            console.log("User ID:", userId);

            // L∆∞u th√¥ng tin thanh to√°n v√†o database
            const payment = await Payment.create({
                userid: userId,
                amount: parseFloat(vnp_Amount) / 100, // Chia 100 ƒë·ªÉ ƒë√∫ng ƒë∆°n v·ªã ti·ªÅn t·ªá
                currency: "VND",
                paymentmethod: "VNPAY",
                status: status,
            });

            console.log("‚úÖ Payment saved:", payment);

            // Redirect ƒë·∫øn React
            if (status === "completed") {
                res.redirect(`http://localhost:3000/payment-success?code=${vnp_TxnRef}`);
            } else {
                res.redirect(`http://localhost:3000/payment-failed?code=99`);
            }
        } catch (error) {
            console.log("‚ùå Error saving payment:", error);
            res.redirect(`http://localhost:3000/payment-failed?code=500`);
        }
    } else {
        res.redirect(`http://localhost:3000/payment-failed?code=97`);
    }
});



// router.get('/vnpay_return', function (req, res) {
//     let vnp_Params = req.query;
//     let secureHash = vnp_Params['vnp_SecureHash'];

//     delete vnp_Params['vnp_SecureHash'];
//     delete vnp_Params['vnp_SecureHashType'];

//     vnp_Params = sortObject(vnp_Params);

//     let config = require('config');
//     let secretKey = config.get('vnp_HashSecret');

//     let querystring = require('qs');
//     let signData = querystring.stringify(vnp_Params, { encode: false });
//     let crypto = require("crypto");     
//     let hmac = crypto.createHmac("sha512", secretKey);
//     let signed = hmac.update(Buffer.from(signData, 'utf-8')).digest("hex");     

//     if (secureHash === signed) {
//         if (vnp_Params['vnp_ResponseCode'] === '00' && vnp_Params['vnp_TransactionStatus'] === '00') {
//             // Redirect ƒë·∫øn React v·ªõi k·∫øt qu·∫£ thanh to√°n
//             res.redirect(`http://localhost:3000/payment-success?code=${vnp_Params['vnp_ResponseCode']}`);
//         } else {
//             res.redirect(`http://localhost:3000/payment-failed?code=99`);
//         }
//     } else {
//         res.redirect(`http://localhost:3000/payment-failed?code=97`);
//     }
// });


router.get('/vnpay_ipn', function (req, res, next) {
    let vnp_Params = req.query;
    let secureHash = vnp_Params['vnp_SecureHash'];
    
    let orderId = vnp_Params['vnp_TxnRef'];
    let rspCode = vnp_Params['vnp_ResponseCode'];

    delete vnp_Params['vnp_SecureHash'];
    delete vnp_Params['vnp_SecureHashType'];

    vnp_Params = sortObject(vnp_Params);
    let config = require('config');
    let secretKey = config.get('vnp_HashSecret');
    let querystring = require('qs');
    let signData = querystring.stringify(vnp_Params, { encode: false });
    let crypto = require("crypto");     
    let hmac = crypto.createHmac("sha512", secretKey);
    let signed = hmac.update(new Buffer(signData, 'utf-8')).digest("hex");     
    
    let paymentStatus = '0'; // Gi·∫£ s·ª≠ '0' l√† tr·∫°ng th√°i kh·ªüi t·∫°o giao d·ªãch, ch∆∞a c√≥ IPN. Tr·∫°ng th√°i n√†y ƒë∆∞·ª£c l∆∞u khi y√™u c·∫ßu thanh to√°n chuy·ªÉn h∆∞·ªõng sang C·ªïng thanh to√°n VNPAY t·∫°i ƒë·∫ßu kh·ªüi t·∫°o ƒë∆°n h√†ng.
    //let paymentStatus = '1'; // Gi·∫£ s·ª≠ '1' l√† tr·∫°ng th√°i th√†nh c√¥ng b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
    //let paymentStatus = '2'; // Gi·∫£ s·ª≠ '2' l√† tr·∫°ng th√°i th·∫•t b·∫°i b·∫°n c·∫≠p nh·∫≠t sau IPN ƒë∆∞·ª£c g·ªçi v√† tr·∫£ k·∫øt qu·∫£ v·ªÅ n√≥
    
    let checkOrderId = true; // M√£ ƒë∆°n h√†ng "gi√° tr·ªã c·ªßa vnp_TxnRef" VNPAY ph·∫£n h·ªìi t·ªìn t·∫°i trong CSDL c·ªßa b·∫°n
    let checkAmount = true; // Ki·ªÉm tra s·ªë ti·ªÅn "gi√° tr·ªã c·ªßa vnp_Amout/100" tr√πng kh·ªõp v·ªõi s·ªë ti·ªÅn c·ªßa ƒë∆°n h√†ng trong CSDL c·ªßa b·∫°n
    if(secureHash === signed){ //ki·ªÉm tra checksum
        if(checkOrderId){
            if(checkAmount){
                if(paymentStatus=="0"){ //ki·ªÉm tra t√¨nh tr·∫°ng giao d·ªãch tr∆∞·ªõc khi c·∫≠p nh·∫≠t t√¨nh tr·∫°ng thanh to√°n
                    if(rspCode=="00"){
                        //thanh cong
                        //paymentStatus = '1'
                        // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th√†nh c√¥ng v√†o CSDL c·ªßa b·∫°n
                        res.status(200).json({RspCode: '00', Message: 'Success'})
                    }
                    else {
                        //that bai
                        //paymentStatus = '2'
                        // ·ªû ƒë√¢y c·∫≠p nh·∫≠t tr·∫°ng th√°i giao d·ªãch thanh to√°n th·∫•t b·∫°i v√†o CSDL c·ªßa b·∫°n
                        res.status(200).json({RspCode: '00', Message: 'Success'})
                    }
                }
                else{
                    res.status(200).json({RspCode: '02', Message: 'This order has been updated to the payment status'})
                }
            }
            else{
                res.status(200).json({RspCode: '04', Message: 'Amount invalid'})
            }
        }       
        else {
            res.status(200).json({RspCode: '01', Message: 'Order not found'})
        }
    }
    else {
        res.status(200).json({RspCode: '97', Message: 'Checksum failed'})
    }
});

router.post('/querydr', function (req, res, next) {
    
    process.env.TZ = 'Asia/Ho_Chi_Minh';
    let date = new Date();

    let config = require('config');
    let crypto = require("crypto");
    
    let vnp_TmnCode = config.get('vnp_TmnCode');
    let secretKey = config.get('vnp_HashSecret');
    let vnp_Api = config.get('vnp_Api');
    
    let vnp_TxnRef = req.body.orderId;
    let vnp_TransactionDate = req.body.transDate;
    
    let vnp_RequestId =moment(date).format('HHmmss');
    let vnp_Version = '2.1.0';
    let vnp_Command = 'querydr';
    let vnp_OrderInfo = 'Truy van GD ma:' + vnp_TxnRef;
    
    let vnp_IpAddr = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;

    let currCode = 'VND';
    let vnp_CreateDate = moment(date).format('YYYYMMDDHHmmss');
    
    let data = vnp_RequestId + "|" + vnp_Version + "|" + vnp_Command + "|" + vnp_TmnCode + "|" + vnp_TxnRef + "|" + vnp_TransactionDate + "|" + vnp_CreateDate + "|" + vnp_IpAddr + "|" + vnp_OrderInfo;
    
    let hmac = crypto.createHmac("sha512", secretKey);
    let vnp_SecureHash = hmac.update(new Buffer(data, 'utf-8')).digest("hex"); 
    
    let dataObj = {
        'vnp_RequestId': vnp_RequestId,
        'vnp_Version': vnp_Version,
        'vnp_Command': vnp_Command,
        'vnp_TmnCode': vnp_TmnCode,
        'vnp_TxnRef': vnp_TxnRef,
        'vnp_OrderInfo': vnp_OrderInfo,
        'vnp_TransactionDate': vnp_TransactionDate,
        'vnp_CreateDate': vnp_CreateDate,
        'vnp_IpAddr': vnp_IpAddr,
        'vnp_SecureHash': vnp_SecureHash
    };
    // /merchant_webapi/api/transaction
    request({
        url: vnp_Api,
        method: "POST",
        json: true,   
        body: dataObj
            }, function (error, response, body){
                console.log(response);
            });

});

router.post('/refund', function (req, res, next) {
    
    process.env.TZ = 'Asia/Ho_Chi_Minh';
    let date = new Date();

    let config = require('config');
    let crypto = require("crypto");
   
    let vnp_TmnCode = config.get('vnp_TmnCode');
    let secretKey = config.get('vnp_HashSecret');
    let vnp_Api = config.get('vnp_Api');
    
    let vnp_TxnRef = req.body.orderId;
    let vnp_TransactionDate = req.body.transDate;
    let vnp_Amount = req.body.amount *100;
    let vnp_TransactionType = req.body.transType;
    let vnp_CreateBy = req.body.user;
            
    let currCode = 'VND';
    
    let vnp_RequestId = moment(date).format('HHmmss');
    let vnp_Version = '2.1.0';
    let vnp_Command = 'refund';
    let vnp_OrderInfo = 'Hoan tien GD ma:' + vnp_TxnRef;
            
    let vnp_IpAddr = req.headers['x-forwarded-for'] ||
        req.connection.remoteAddress ||
        req.socket.remoteAddress ||
        req.connection.socket.remoteAddress;

    
    let vnp_CreateDate = moment(date).format('YYYYMMDDHHmmss');
    
    let vnp_TransactionNo = '0';
    
    let data = vnp_RequestId + "|" + vnp_Version + "|" + vnp_Command + "|" + vnp_TmnCode + "|" + vnp_TransactionType + "|" + vnp_TxnRef + "|" + vnp_Amount + "|" + vnp_TransactionNo + "|" + vnp_TransactionDate + "|" + vnp_CreateBy + "|" + vnp_CreateDate + "|" + vnp_IpAddr + "|" + vnp_OrderInfo;
    let hmac = crypto.createHmac("sha512", secretKey);
    let vnp_SecureHash = hmac.update(new Buffer(data, 'utf-8')).digest("hex");
    
     let dataObj = {
        'vnp_RequestId': vnp_RequestId,
        'vnp_Version': vnp_Version,
        'vnp_Command': vnp_Command,
        'vnp_TmnCode': vnp_TmnCode,
        'vnp_TransactionType': vnp_TransactionType,
        'vnp_TxnRef': vnp_TxnRef,
        'vnp_Amount': vnp_Amount,
        'vnp_TransactionNo': vnp_TransactionNo,
        'vnp_CreateBy': vnp_CreateBy,
        'vnp_OrderInfo': vnp_OrderInfo,
        'vnp_TransactionDate': vnp_TransactionDate,
        'vnp_CreateDate': vnp_CreateDate,
        'vnp_IpAddr': vnp_IpAddr,
        'vnp_SecureHash': vnp_SecureHash
    };
    
    request({
        url: vnp_Api,
        method: "POST",
        json: true,   
        body: dataObj
            }, function (error, response, body){
                console.log(response);
            });
    
});

function sortObject(obj) {
	let sorted = {};
	let str = [];
	let key;
	for (key in obj){
		if (obj.hasOwnProperty(key)) {
		str.push(encodeURIComponent(key));
		}
	}
	str.sort();
    for (key = 0; key < str.length; key++) {
        sorted[str[key]] = encodeURIComponent(obj[str[key]]).replace(/%20/g, "+");
    }
    return sorted;
}

module.exports = router;
